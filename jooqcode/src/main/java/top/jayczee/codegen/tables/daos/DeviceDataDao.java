/*
 * This file is generated by jOOQ.
 */
package top.jayczee.codegen.tables.daos;


import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import top.jayczee.codegen.tables.DeviceDataTable;
import top.jayczee.codegen.tables.pojos.DeviceData;
import top.jayczee.codegen.tables.records.DeviceDataRecord;


/**
 * 数据记录
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class DeviceDataDao extends DAOImpl<DeviceDataRecord, DeviceData, Long> {

    /**
     * Create a new DeviceDataDao without any configuration
     */
    public DeviceDataDao() {
        super(DeviceDataTable.DEVICE_DATA, DeviceData.class);
    }

    /**
     * Create a new DeviceDataDao with an attached configuration
     */
    @Autowired
    public DeviceDataDao(Configuration configuration) {
        super(DeviceDataTable.DEVICE_DATA, DeviceData.class, configuration);
    }

    @Override
    public Long getId(DeviceData object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<DeviceData> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(DeviceDataTable.DEVICE_DATA.Id, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<DeviceData> fetchById(Long... values) {
        return fetch(DeviceDataTable.DEVICE_DATA.Id, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public DeviceData fetchOneById(Long value) {
        return fetchOne(DeviceDataTable.DEVICE_DATA.Id, value);
    }

    /**
     * Fetch records that have <code>create_dt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<DeviceData> fetchRangeOfCreateDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(DeviceDataTable.DEVICE_DATA.CreateDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_dt IN (values)</code>
     */
    public List<DeviceData> fetchByCreateDt(LocalDateTime... values) {
        return fetch(DeviceDataTable.DEVICE_DATA.CreateDt, values);
    }

    /**
     * Fetch records that have <code>ip BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<DeviceData> fetchRangeOfIp(String lowerInclusive, String upperInclusive) {
        return fetchRange(DeviceDataTable.DEVICE_DATA.Ip, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ip IN (values)</code>
     */
    public List<DeviceData> fetchByIp(String... values) {
        return fetch(DeviceDataTable.DEVICE_DATA.Ip, values);
    }

    /**
     * Fetch records that have <code>device_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<DeviceData> fetchRangeOfDeviceId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(DeviceDataTable.DEVICE_DATA.DeviceId, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>device_id IN (values)</code>
     */
    public List<DeviceData> fetchByDeviceId(Long... values) {
        return fetch(DeviceDataTable.DEVICE_DATA.DeviceId, values);
    }

    /**
     * Fetch records that have <code>data BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<DeviceData> fetchRangeOfData(String lowerInclusive, String upperInclusive) {
        return fetchRange(DeviceDataTable.DEVICE_DATA.Data, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>data IN (values)</code>
     */
    public List<DeviceData> fetchByData(String... values) {
        return fetch(DeviceDataTable.DEVICE_DATA.Data, values);
    }

    /**
     * Fetch records that have <code>data_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<DeviceData> fetchRangeOfDataType(String lowerInclusive, String upperInclusive) {
        return fetchRange(DeviceDataTable.DEVICE_DATA.DataType, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>data_type IN (values)</code>
     */
    public List<DeviceData> fetchByDataType(String... values) {
        return fetch(DeviceDataTable.DEVICE_DATA.DataType, values);
    }

    /**
     * Fetch records that have <code>is_error BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<DeviceData> fetchRangeOfIsError(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(DeviceDataTable.DEVICE_DATA.IsError, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_error IN (values)</code>
     */
    public List<DeviceData> fetchByIsError(Boolean... values) {
        return fetch(DeviceDataTable.DEVICE_DATA.IsError, values);
    }
}
