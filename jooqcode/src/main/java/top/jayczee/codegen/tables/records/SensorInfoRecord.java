/*
 * This file is generated by jOOQ.
 */
package top.jayczee.codegen.tables.records;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;

import top.jayczee.codegen.tables.SensorInfoTable;
import top.jayczee.codegen.tables.interfaces.ISensorInfo;


/**
 * 传感器信息
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SensorInfoRecord extends UpdatableRecordImpl<SensorInfoRecord> implements Record7<Long, LocalDateTime, String, Long, String, Boolean, Boolean>, ISensorInfo {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>graduation.sensor_info.id</code>. 主键
     */
    @Override
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>graduation.sensor_info.id</code>. 主键
     */
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>graduation.sensor_info.create_dt</code>. 创建日时(系统)
     */
    @Override
    public void setCreateDt(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>graduation.sensor_info.create_dt</code>. 创建日时(系统)
     */
    @Override
    public LocalDateTime getCreateDt() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>graduation.sensor_info.sensor_name</code>. 传感器名称
     */
    @Override
    public void setSensorName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>graduation.sensor_info.sensor_name</code>. 传感器名称
     */
    @Override
    public String getSensorName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>graduation.sensor_info.device_id</code>. 设备ID
     */
    @Override
    public void setDeviceId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>graduation.sensor_info.device_id</code>. 设备ID
     */
    @Override
    public Long getDeviceId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>graduation.sensor_info.data_type</code>. 传感器类型
     */
    @Override
    public void setDataType(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>graduation.sensor_info.data_type</code>. 传感器类型
     */
    @Override
    public String getDataType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>graduation.sensor_info.is_running</code>. 是否打开
     */
    @Override
    public void setIsRunning(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>graduation.sensor_info.is_running</code>. 是否打开
     */
    @Override
    public Boolean getIsRunning() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>graduation.sensor_info.is_delete</code>. 是否已删除
     */
    @Override
    public void setIsDelete(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>graduation.sensor_info.is_delete</code>. 是否已删除
     */
    @Override
    public Boolean getIsDelete() {
        return (Boolean) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, LocalDateTime, String, Long, String, Boolean, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, LocalDateTime, String, Long, String, Boolean, Boolean> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return SensorInfoTable.SENSOR_INFO.Id;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return SensorInfoTable.SENSOR_INFO.CreateDt;
    }

    @Override
    public Field<String> field3() {
        return SensorInfoTable.SENSOR_INFO.SensorName;
    }

    @Override
    public Field<Long> field4() {
        return SensorInfoTable.SENSOR_INFO.DeviceId;
    }

    @Override
    public Field<String> field5() {
        return SensorInfoTable.SENSOR_INFO.DataType;
    }

    @Override
    public Field<Boolean> field6() {
        return SensorInfoTable.SENSOR_INFO.IsRunning;
    }

    @Override
    public Field<Boolean> field7() {
        return SensorInfoTable.SENSOR_INFO.IsDelete;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public LocalDateTime component2() {
        return getCreateDt();
    }

    @Override
    public String component3() {
        return getSensorName();
    }

    @Override
    public Long component4() {
        return getDeviceId();
    }

    @Override
    public String component5() {
        return getDataType();
    }

    @Override
    public Boolean component6() {
        return getIsRunning();
    }

    @Override
    public Boolean component7() {
        return getIsDelete();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public LocalDateTime value2() {
        return getCreateDt();
    }

    @Override
    public String value3() {
        return getSensorName();
    }

    @Override
    public Long value4() {
        return getDeviceId();
    }

    @Override
    public String value5() {
        return getDataType();
    }

    @Override
    public Boolean value6() {
        return getIsRunning();
    }

    @Override
    public Boolean value7() {
        return getIsDelete();
    }

    @Override
    public SensorInfoRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public SensorInfoRecord value2(LocalDateTime value) {
        setCreateDt(value);
        return this;
    }

    @Override
    public SensorInfoRecord value3(String value) {
        setSensorName(value);
        return this;
    }

    @Override
    public SensorInfoRecord value4(Long value) {
        setDeviceId(value);
        return this;
    }

    @Override
    public SensorInfoRecord value5(String value) {
        setDataType(value);
        return this;
    }

    @Override
    public SensorInfoRecord value6(Boolean value) {
        setIsRunning(value);
        return this;
    }

    @Override
    public SensorInfoRecord value7(Boolean value) {
        setIsDelete(value);
        return this;
    }

    @Override
    public SensorInfoRecord values(Long value1, LocalDateTime value2, String value3, Long value4, String value5, Boolean value6, Boolean value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ISensorInfo from) {
        setId(from.getId());
        setCreateDt(from.getCreateDt());
        setSensorName(from.getSensorName());
        setDeviceId(from.getDeviceId());
        setDataType(from.getDataType());
        setIsRunning(from.getIsRunning());
        setIsDelete(from.getIsDelete());
    }

    @Override
    public <E extends ISensorInfo> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SensorInfoRecord
     */
    public SensorInfoRecord() {
        super(SensorInfoTable.SENSOR_INFO);
    }

    /**
     * Create a detached, initialised SensorInfoRecord
     */
    public SensorInfoRecord(Long id, LocalDateTime createDt, String sensorName, Long deviceId, String dataType, Boolean isRunning, Boolean isDelete) {
        super(SensorInfoTable.SENSOR_INFO);

        setId(id);
        setCreateDt(createDt);
        setSensorName(sensorName);
        setDeviceId(deviceId);
        setDataType(dataType);
        setIsRunning(isRunning);
        setIsDelete(isDelete);
    }
}
