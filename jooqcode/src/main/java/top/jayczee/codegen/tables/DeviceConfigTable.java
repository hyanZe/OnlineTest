/*
 * This file is generated by jOOQ.
 */
package top.jayczee.codegen.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import top.jayczee.codegen.Graduation;
import top.jayczee.codegen.Keys;
import top.jayczee.codegen.tables.records.DeviceConfigRecord;


/**
 * 设备配置表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DeviceConfigTable extends TableImpl<DeviceConfigRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>graduation.device_config</code>
     */
    public static final DeviceConfigTable DEVICE_CONFIG = new DeviceConfigTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeviceConfigRecord> getRecordType() {
        return DeviceConfigRecord.class;
    }

    /**
     * The column <code>graduation.device_config.id</code>. 主键
     */
    public final TableField<DeviceConfigRecord, Long> Id = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "主键");

    /**
     * The column <code>graduation.device_config.create_dt</code>. 创建日时(系统)
     */
    public final TableField<DeviceConfigRecord, LocalDateTime> CreateDt = createField(DSL.name("create_dt"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "创建日时(系统)");

    /**
     * The column <code>graduation.device_config.device_id</code>. 设备ID
     */
    public final TableField<DeviceConfigRecord, Long> DeviceId = createField(DSL.name("device_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "设备ID");

    /**
     * The column <code>graduation.device_config.config_key</code>. 配置名称
     */
    public final TableField<DeviceConfigRecord, String> ConfigKey = createField(DSL.name("config_key"), SQLDataType.VARCHAR(200).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "配置名称");

    /**
     * The column <code>graduation.device_config.config_val</code>. 配置值
     */
    public final TableField<DeviceConfigRecord, String> ConfigVal = createField(DSL.name("config_val"), SQLDataType.VARCHAR(200).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "配置值");

    /**
     * The column <code>graduation.device_config.is_delete</code>. 是否已删除
     */
    public final TableField<DeviceConfigRecord, Boolean> IsDelete = createField(DSL.name("is_delete"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "是否已删除");

    private DeviceConfigTable(Name alias, Table<DeviceConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private DeviceConfigTable(Name alias, Table<DeviceConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("设备配置表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>graduation.device_config</code> table reference
     */
    public DeviceConfigTable(String alias) {
        this(DSL.name(alias), DEVICE_CONFIG);
    }

    /**
     * Create an aliased <code>graduation.device_config</code> table reference
     */
    public DeviceConfigTable(Name alias) {
        this(alias, DEVICE_CONFIG);
    }

    /**
     * Create a <code>graduation.device_config</code> table reference
     */
    public DeviceConfigTable() {
        this(DSL.name("device_config"), null);
    }

    public <O extends Record> DeviceConfigTable(Table<O> child, ForeignKey<O, DeviceConfigRecord> key) {
        super(child, key, DEVICE_CONFIG);
    }

    @Override
    public Schema getSchema() {
        return Graduation.GRADUATION;
    }

    @Override
    public UniqueKey<DeviceConfigRecord> getPrimaryKey() {
        return Keys.KEY_DEVICE_CONFIG_PRIMARY;
    }

    @Override
    public List<UniqueKey<DeviceConfigRecord>> getKeys() {
        return Arrays.<UniqueKey<DeviceConfigRecord>>asList(Keys.KEY_DEVICE_CONFIG_PRIMARY);
    }

    @Override
    public DeviceConfigTable as(String alias) {
        return new DeviceConfigTable(DSL.name(alias), this);
    }

    @Override
    public DeviceConfigTable as(Name alias) {
        return new DeviceConfigTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DeviceConfigTable rename(String name) {
        return new DeviceConfigTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DeviceConfigTable rename(Name name) {
        return new DeviceConfigTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, LocalDateTime, Long, String, String, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
