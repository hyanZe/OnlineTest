/*
 * This file is generated by jOOQ.
 */
package top.jayczee.codegen.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import top.jayczee.codegen.Graduation;
import top.jayczee.codegen.Keys;
import top.jayczee.codegen.tables.records.SensorInfoRecord;


/**
 * 传感器信息
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SensorInfoTable extends TableImpl<SensorInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>graduation.sensor_info</code>
     */
    public static final SensorInfoTable SENSOR_INFO = new SensorInfoTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SensorInfoRecord> getRecordType() {
        return SensorInfoRecord.class;
    }

    /**
     * The column <code>graduation.sensor_info.id</code>. 主键
     */
    public final TableField<SensorInfoRecord, Long> Id = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "主键");

    /**
     * The column <code>graduation.sensor_info.create_dt</code>. 创建日时(系统)
     */
    public final TableField<SensorInfoRecord, LocalDateTime> CreateDt = createField(DSL.name("create_dt"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "创建日时(系统)");

    /**
     * The column <code>graduation.sensor_info.sensor_name</code>. 传感器名称
     */
    public final TableField<SensorInfoRecord, String> SensorName = createField(DSL.name("sensor_name"), SQLDataType.VARCHAR(200).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "传感器名称");

    /**
     * The column <code>graduation.sensor_info.device_id</code>. 设备ID
     */
    public final TableField<SensorInfoRecord, Long> DeviceId = createField(DSL.name("device_id"), SQLDataType.BIGINT.nullable(false), this, "设备ID");

    /**
     * The column <code>graduation.sensor_info.is_running</code>. 是否打开
     */
    public final TableField<SensorInfoRecord, Boolean> IsRunning = createField(DSL.name("is_running"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "是否打开");

    private SensorInfoTable(Name alias, Table<SensorInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private SensorInfoTable(Name alias, Table<SensorInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("传感器信息"), TableOptions.table());
    }

    /**
     * Create an aliased <code>graduation.sensor_info</code> table reference
     */
    public SensorInfoTable(String alias) {
        this(DSL.name(alias), SENSOR_INFO);
    }

    /**
     * Create an aliased <code>graduation.sensor_info</code> table reference
     */
    public SensorInfoTable(Name alias) {
        this(alias, SENSOR_INFO);
    }

    /**
     * Create a <code>graduation.sensor_info</code> table reference
     */
    public SensorInfoTable() {
        this(DSL.name("sensor_info"), null);
    }

    public <O extends Record> SensorInfoTable(Table<O> child, ForeignKey<O, SensorInfoRecord> key) {
        super(child, key, SENSOR_INFO);
    }

    @Override
    public Schema getSchema() {
        return Graduation.GRADUATION;
    }

    @Override
    public UniqueKey<SensorInfoRecord> getPrimaryKey() {
        return Keys.KEY_SENSOR_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<SensorInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<SensorInfoRecord>>asList(Keys.KEY_SENSOR_INFO_PRIMARY);
    }

    @Override
    public SensorInfoTable as(String alias) {
        return new SensorInfoTable(DSL.name(alias), this);
    }

    @Override
    public SensorInfoTable as(Name alias) {
        return new SensorInfoTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SensorInfoTable rename(String name) {
        return new SensorInfoTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SensorInfoTable rename(Name name) {
        return new SensorInfoTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, LocalDateTime, String, Long, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
