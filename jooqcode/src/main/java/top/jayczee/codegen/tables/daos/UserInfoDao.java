/*
 * This file is generated by jOOQ.
 */
package top.jayczee.codegen.tables.daos;


import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import top.jayczee.codegen.tables.UserInfoTable;
import top.jayczee.codegen.tables.pojos.UserInfo;
import top.jayczee.codegen.tables.records.UserInfoRecord;


/**
 * 用户信息
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UserInfoDao extends DAOImpl<UserInfoRecord, UserInfo, Long> {

    /**
     * Create a new UserInfoDao without any configuration
     */
    public UserInfoDao() {
        super(UserInfoTable.USER_INFO, UserInfo.class);
    }

    /**
     * Create a new UserInfoDao with an attached configuration
     */
    @Autowired
    public UserInfoDao(Configuration configuration) {
        super(UserInfoTable.USER_INFO, UserInfo.class, configuration);
    }

    @Override
    public Long getId(UserInfo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserInfo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserInfoTable.USER_INFO.Id, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<UserInfo> fetchById(Long... values) {
        return fetch(UserInfoTable.USER_INFO.Id, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public UserInfo fetchOneById(Long value) {
        return fetchOne(UserInfoTable.USER_INFO.Id, value);
    }

    /**
     * Fetch records that have <code>create_dt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserInfo> fetchRangeOfCreateDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserInfoTable.USER_INFO.CreateDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_dt IN (values)</code>
     */
    public List<UserInfo> fetchByCreateDt(LocalDateTime... values) {
        return fetch(UserInfoTable.USER_INFO.CreateDt, values);
    }

    /**
     * Fetch records that have <code>login_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserInfo> fetchRangeOfLoginName(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserInfoTable.USER_INFO.LoginName, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>login_name IN (values)</code>
     */
    public List<UserInfo> fetchByLoginName(String... values) {
        return fetch(UserInfoTable.USER_INFO.LoginName, values);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<UserInfo> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserInfoTable.USER_INFO.Password, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<UserInfo> fetchByPassword(String... values) {
        return fetch(UserInfoTable.USER_INFO.Password, values);
    }
}
